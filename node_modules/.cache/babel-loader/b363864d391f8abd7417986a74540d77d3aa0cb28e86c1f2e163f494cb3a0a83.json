{"ast":null,"code":"var _jsxFileName = \"/Users/chandler/repos/react-weather-app/src/components/search/search.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { AsyncPaginate } from \"react-select-async-paginate\";\nimport { GEO_API_URL, geoApiOptions } from \"../../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Search = ({\n  onSearchChange\n}) => {\n  _s();\n  const [search, setSearch] = useState(null);\n  const loadOptions = async inputValue => {\n    try {\n      const response = await fetch(`${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`, geoApiOptions);\n      const result = await response.json();\n      return {\n        options: response.data.map(city => {\n          return {\n            value: `${city.latitude} ${city.longitude}`,\n            label: `${city.name}, ${city.countryCode}`\n          };\n        })\n      };\n    } catch (error) {\n      console.error(error);\n    }\n\n    // return fetch(\n    //   `${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`,\n    //   geoApiOptions\n    // )\n    //   .then((response) => response.json())\n    //   .then((response) => {\n    //     return {\n    //       options: response.data.map((city) => {\n    //         // Fixed syntax here\n    //         return {\n    //           value: `${city.latitude} ${city.longitude}`,\n    //           label: `${city.name}, ${city.countryCode}`,\n    //         };\n    //       }),\n    //     };\n    //   })\n    //   .catch((err) => console.log(err)); // Fixed syntax here\n  };\n\n  const handleOnChange = searchData => {\n    setSearch(searchData);\n    onSearchChange(searchData);\n  };\n  return /*#__PURE__*/_jsxDEV(AsyncPaginate, {\n    placeholder: \"Search for city\",\n    debounceTimeout: 600,\n    value: search,\n    onChange: handleOnChange,\n    loadOptions: loadOptions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(Search, \"rZ+0pF47En10nDqJpRK7x4d9dB0=\");\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["useState","AsyncPaginate","GEO_API_URL","geoApiOptions","jsxDEV","_jsxDEV","Search","onSearchChange","_s","search","setSearch","loadOptions","inputValue","response","fetch","result","json","options","data","map","city","value","latitude","longitude","label","name","countryCode","error","console","handleOnChange","searchData","placeholder","debounceTimeout","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/chandler/repos/react-weather-app/src/components/search/search.js"],"sourcesContent":["import { useState } from \"react\";\nimport { AsyncPaginate } from \"react-select-async-paginate\";\nimport { GEO_API_URL, geoApiOptions } from \"../../api\";\n\nconst Search = ({ onSearchChange }) => {\n  const [search, setSearch] = useState(null);\n\n  const loadOptions = async (inputValue) => {\n    try {\n      const response = await fetch(\n        `${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`,\n        geoApiOptions\n      );\n      const result = await response.json();\n      return {\n        options: response.data.map((city) => {\n          return {\n            value: `${city.latitude} ${city.longitude}`,\n            label: `${city.name}, ${city.countryCode}`,\n          };\n        }),\n      };\n    } catch (error) {\n      console.error(error);\n    }\n\n    // return fetch(\n    //   `${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`,\n    //   geoApiOptions\n    // )\n    //   .then((response) => response.json())\n    //   .then((response) => {\n    //     return {\n    //       options: response.data.map((city) => {\n    //         // Fixed syntax here\n    //         return {\n    //           value: `${city.latitude} ${city.longitude}`,\n    //           label: `${city.name}, ${city.countryCode}`,\n    //         };\n    //       }),\n    //     };\n    //   })\n    //   .catch((err) => console.log(err)); // Fixed syntax here\n  };\n\n  const handleOnChange = (searchData) => {\n    setSearch(searchData);\n    onSearchChange(searchData);\n  };\n\n  return (\n    <AsyncPaginate\n      placeholder=\"Search for city\"\n      debounceTimeout={600}\n      value={search}\n      onChange={handleOnChange}\n      loadOptions={loadOptions}\n    />\n  );\n};\n\nexport default Search;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,aAAa,QAAQ,6BAA6B;AAC3D,SAASC,WAAW,EAAEC,aAAa,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,MAAMC,MAAM,GAAGA,CAAC;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE1C,MAAMW,WAAW,GAAG,MAAOC,UAAU,IAAK;IACxC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,GAAEZ,WAAY,4CAA2CU,UAAW,EAAC,EACtET,aACF,CAAC;MACD,MAAMY,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MACpC,OAAO;QACLC,OAAO,EAAEJ,QAAQ,CAACK,IAAI,CAACC,GAAG,CAAEC,IAAI,IAAK;UACnC,OAAO;YACLC,KAAK,EAAG,GAAED,IAAI,CAACE,QAAS,IAAGF,IAAI,CAACG,SAAU,EAAC;YAC3CC,KAAK,EAAG,GAAEJ,IAAI,CAACK,IAAK,KAAIL,IAAI,CAACM,WAAY;UAC3C,CAAC;QACH,CAAC;MACH,CAAC;IACH,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF,CAAC;;EAED,MAAME,cAAc,GAAIC,UAAU,IAAK;IACrCpB,SAAS,CAACoB,UAAU,CAAC;IACrBvB,cAAc,CAACuB,UAAU,CAAC;EAC5B,CAAC;EAED,oBACEzB,OAAA,CAACJ,aAAa;IACZ8B,WAAW,EAAC,iBAAiB;IAC7BC,eAAe,EAAE,GAAI;IACrBX,KAAK,EAAEZ,MAAO;IACdwB,QAAQ,EAAEJ,cAAe;IACzBlB,WAAW,EAAEA;EAAY;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1B,CAAC;AAEN,CAAC;AAAC7B,EAAA,CAvDIF,MAAM;AAAAgC,EAAA,GAANhC,MAAM;AAyDZ,eAAeA,MAAM;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}