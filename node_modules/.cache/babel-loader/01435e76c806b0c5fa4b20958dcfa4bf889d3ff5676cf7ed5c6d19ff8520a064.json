{"ast":null,"code":"var _jsxFileName = \"/Users/chandler/repos/react-weather-app/src/components/search/search.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { AsyncPaginate } from \"react-select-async-paginate\";\nimport { GEO_API_URL, geoApiOptions } from \"../../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Search = ({\n  onSearchChange\n}) => {\n  _s();\n  const [search, setSearch] = useState(null);\n  const loadOptions = async inputValue => {\n    try {\n      const response = await fetch(`${GEO_API_URL}?minPopulation=1000000&namePrefix=${inputValue}`, geoApiOptions);\n      const result = await response.json();\n      console.log(result);\n      return {\n        options: result.data.map(city => {\n          return {\n            value: `${city.latitude} ${city.longitude}`,\n            label: `${city.name}, ${city.countryCode}`\n          };\n        })\n      };\n    } catch (error) {\n      console.error(error);\n      return {\n        options: []\n      }; // Ensure an empty array of options is returned in case of an error\n    }\n  };\n\n  //   const loadOptions = (inputValue) => {\n  //     // try {\n  //     //   const response = await fetch(\n  //     //     `${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`,\n  //     //     geoApiOptions\n  //     //   );\n  //     //   const result = await response.json();\n  //     //   return {\n  //     //     options: result.data.map((city) => {\n  //     //       return {\n  //     //         value: `${city.latitude} ${city.longitude}`,\n  //     //         label: `${city.name}, ${city.countryCode}`,\n  //     //       };\n  //     //     }),\n  //     //   };\n  //     // } catch (error) {\n  //     //   console.error(error);\n  //     // }\n\n  //     return fetch(\n  //       `${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`,\n  //       geoApiOptions\n  //     )\n  //       .then((response) => response.json())\n  //       .then((response) => {\n  //         return {\n  //           options: response.data.map((city) => {\n  //             // Fixed syntax here\n  //             return {\n  //               value: `${city.latitude} ${city.longitude}`,\n  //               label: `${city.name}, ${city.countryCode}`,\n  //             };\n  //           }),\n  //         };\n  //       })\n  //       .catch((err) => console.log(err)); // Fixed syntax here\n  //   };\n\n  const handleOnChange = searchData => {\n    setSearch(searchData);\n    onSearchChange(searchData);\n  };\n  return /*#__PURE__*/_jsxDEV(AsyncPaginate, {\n    placeholder: \"Search for city\",\n    debounceTimeout: 600,\n    value: search,\n    onChange: handleOnChange,\n    loadOptions: loadOptions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(Search, \"rZ+0pF47En10nDqJpRK7x4d9dB0=\");\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["useState","AsyncPaginate","GEO_API_URL","geoApiOptions","jsxDEV","_jsxDEV","Search","onSearchChange","_s","search","setSearch","loadOptions","inputValue","response","fetch","result","json","console","log","options","data","map","city","value","latitude","longitude","label","name","countryCode","error","handleOnChange","searchData","placeholder","debounceTimeout","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/chandler/repos/react-weather-app/src/components/search/search.js"],"sourcesContent":["import { useState } from \"react\";\nimport { AsyncPaginate } from \"react-select-async-paginate\";\nimport { GEO_API_URL, geoApiOptions } from \"../../api\";\n\nconst Search = ({ onSearchChange }) => {\n  const [search, setSearch] = useState(null);\n\n  const loadOptions = async (inputValue) => {\n    try {\n      const response = await fetch(\n        `${GEO_API_URL}?minPopulation=1000000&namePrefix=${inputValue}`,\n        geoApiOptions\n      );\n      const result = await response.json();\n      console.log(result);\n      return {\n        options: result.data.map((city) => {\n          return {\n            value: `${city.latitude} ${city.longitude}`,\n            label: `${city.name}, ${city.countryCode}`,\n          };\n        }),\n      };\n    } catch (error) {\n      console.error(error);\n      return { options: [] }; // Ensure an empty array of options is returned in case of an error\n    }\n  };\n\n  //   const loadOptions = (inputValue) => {\n  //     // try {\n  //     //   const response = await fetch(\n  //     //     `${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`,\n  //     //     geoApiOptions\n  //     //   );\n  //     //   const result = await response.json();\n  //     //   return {\n  //     //     options: result.data.map((city) => {\n  //     //       return {\n  //     //         value: `${city.latitude} ${city.longitude}`,\n  //     //         label: `${city.name}, ${city.countryCode}`,\n  //     //       };\n  //     //     }),\n  //     //   };\n  //     // } catch (error) {\n  //     //   console.error(error);\n  //     // }\n\n  //     return fetch(\n  //       `${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`,\n  //       geoApiOptions\n  //     )\n  //       .then((response) => response.json())\n  //       .then((response) => {\n  //         return {\n  //           options: response.data.map((city) => {\n  //             // Fixed syntax here\n  //             return {\n  //               value: `${city.latitude} ${city.longitude}`,\n  //               label: `${city.name}, ${city.countryCode}`,\n  //             };\n  //           }),\n  //         };\n  //       })\n  //       .catch((err) => console.log(err)); // Fixed syntax here\n  //   };\n\n  const handleOnChange = (searchData) => {\n    setSearch(searchData);\n    onSearchChange(searchData);\n  };\n\n  return (\n    <AsyncPaginate\n      placeholder=\"Search for city\"\n      debounceTimeout={600}\n      value={search}\n      onChange={handleOnChange}\n      loadOptions={loadOptions}\n    />\n  );\n};\n\nexport default Search;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,aAAa,QAAQ,6BAA6B;AAC3D,SAASC,WAAW,EAAEC,aAAa,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,MAAMC,MAAM,GAAGA,CAAC;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE1C,MAAMW,WAAW,GAAG,MAAOC,UAAU,IAAK;IACxC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,GAAEZ,WAAY,qCAAoCU,UAAW,EAAC,EAC/DT,aACF,CAAC;MACD,MAAMY,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MACpCC,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC;MACnB,OAAO;QACLI,OAAO,EAAEJ,MAAM,CAACK,IAAI,CAACC,GAAG,CAAEC,IAAI,IAAK;UACjC,OAAO;YACLC,KAAK,EAAG,GAAED,IAAI,CAACE,QAAS,IAAGF,IAAI,CAACG,SAAU,EAAC;YAC3CC,KAAK,EAAG,GAAEJ,IAAI,CAACK,IAAK,KAAIL,IAAI,CAACM,WAAY;UAC3C,CAAC;QACH,CAAC;MACH,CAAC;IACH,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdZ,OAAO,CAACY,KAAK,CAACA,KAAK,CAAC;MACpB,OAAO;QAAEV,OAAO,EAAE;MAAG,CAAC,CAAC,CAAC;IAC1B;EACF,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMW,cAAc,GAAIC,UAAU,IAAK;IACrCrB,SAAS,CAACqB,UAAU,CAAC;IACrBxB,cAAc,CAACwB,UAAU,CAAC;EAC5B,CAAC;EAED,oBACE1B,OAAA,CAACJ,aAAa;IACZ+B,WAAW,EAAC,iBAAiB;IAC7BC,eAAe,EAAE,GAAI;IACrBV,KAAK,EAAEd,MAAO;IACdyB,QAAQ,EAAEJ,cAAe;IACzBnB,WAAW,EAAEA;EAAY;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1B,CAAC;AAEN,CAAC;AAAC9B,EAAA,CA7EIF,MAAM;AAAAiC,EAAA,GAANjC,MAAM;AA+EZ,eAAeA,MAAM;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}